...
... $Header: /afs/dev.mit.edu/source/repository/athena/bin/discuss/dsgrep/dsgrep.1,v 1.1 1991-05-22 11:24:56 lwvanels Exp $
...
.TH DSGREP
.DA 18 Jun 1990
.SH NAME
dsgrep \- Search discuss meetings with regular expressions
.SH SYNOPSIS
dsgrep [-n n_trans] [-e search_regexp] [-f meetings_file]
[-t trans_num] [-a] [-p] [-v] [-i] [meetingname1 meetingname2 ...]
.SH DESCRIPTION
.I Dsgrep
searches discuss meetings for transactions that have titles that match the
given regular expression, or have contents that match the regular
expression.  The title of the matching transactions or their contents
can be printed.

.I Dsgrep
understands the following options:
.TP 12
.B \-n \fIn_trans\fR
specifies the number of transactions to look back from the last transaction
in each discuss meeting specified.  This defaults to 50.  This option is
ignored when the -t option is specified.
.TP
.B \-e \fIsearch_regexp\fR
This specifies the regular expression to be matched, in the style of
.IR egrep (1).
A detailed explaination of the regular expression format is
given below.  If this is omitted, it defaults to "*", matching all
transactions.
.TP
.B \-f \fImeetings_file\fR
This specifies an alternative meetings file to use as a source of meetings.
If neither this option nor the the -l option is specified, it will use the
file ${HOME}/.meetings., 
.TP
.B \-t \fItrans_num\fR
Print out a specific transaction, by number.  When this option is used, the
-n option is ignored.
.TP
.B \-l
Causes dsgrep to use a standard meetings file instead of the default.  This
allows you search a set of discuss meetings which are not necessarily in
your own meetings file.
.TP
.B \-a
Causes
.I dsgrep
to search the text of the transactions for the regular expressions as well
as their titles.
.TP
.B \-p
Causes the text of the text of the matching transactions to be printed
instead of just the title.
.TP
.B \-v
Causes errors getting transactions to be reported.  These errors are usually
due to deleted transactions in the meetings, and are ususally not worth
seeing.
.TP
.B \-d
Causes deleted transactions to be searched as well.  Otherwise, deleted
transactions are ignored.
.TP
.B \-i
Converts the text of the titles/transactions to be converted to lower case
before it is searched.  This allows for case-insensitive searching.
.TP
.B \fImeetings\fR
This specifies the meetings to search; if it is left off, 
.I dsgrep 
will search all the meetings.
.SH "REGULAR EXPRESSION SYNTAX"
A regular expression is zero or more \fIbranches\fR, separated by `|'.
It matches anything that matches one of the branches.
.PP
A branch is zero or more \fIpieces\fR, concatenated.
It matches a match for the first, followed by a match for the second, etc.
.PP
A piece is an \fIatom\fR possibly followed by `*', `+', or `?'.
An atom followed by `*' matches a sequence of 0 or more matches of the atom.
An atom followed by `+' matches a sequence of 1 or more matches of the atom.
An atom followed by `?' matches a match of the atom, or the null string.
.PP
An atom is a regular expression in parentheses (matching a match for the
regular expression), a \fIrange\fR (see below), `.'
(matching any single character), `^' (matching the null string at the
beginning of the input string), `$' (matching the null string at the
end of the input string), a `\e' followed by a single character (matching
that character), or a single character with no other significance
(matching that character).
.PP
A \fIrange\fR is a sequence of characters enclosed in `[]'.
It normally matches any single character from the sequence.
If the sequence begins with `^',
it matches any single character \fInot\fR from the rest of the sequence.
If two characters in the sequence are separated by `\-', this is shorthand
for the full list of ASCII characters between them
(e.g. `[0-9]' matches any decimal digit).
To include a literal `]' in the sequence, make it the first character
(following a possible `^').
To include a literal `\-', make it the first or last character.
.SH AMBIGUITY
If a regular expression could match two different parts of the input string,
it will match the one which begins earliest.
If both begin in the same place	but match different lengths, or match
the same length in different ways, life gets messier, as follows.
.PP
In general, the possibilities in a list of branches are considered in
left-to-right order, the possibilities for `*', `+', and `?' are
considered longest-first, nested constructs are considered from the
outermost in, and concatenated constructs are considered leftmost-first.
The match that will be chosen is the one that uses the earliest
possibility in the first choice that has to be made.
If there is more than one choice, the next will be made in the same manner
(earliest possibility) subject to the decision on the first choice.
And so forth.
.PP
For example, `(ab|a)b*c' could match `abc' in one of two ways.
The first choice is between `ab' and `a'; since `ab' is earlier, and does
lead to a successful overall match, it is chosen.
Since the `b' is already spoken for,
the `b*' must match its last possibility\(emthe empty string\(emsince
it must respect the earlier choice.
.PP
In the particular case where no `|'s are present and there is only one
`*', `+', or `?', the net effect is that the longest possible
match will be chosen.
So `ab*', presented with `xabbbby', will match `abbbb'.
Note that if `ab*' is tried against `xabyabbbz', it
will match `ab' just after `x', due to the begins-earliest rule.
(In effect, the decision on where to start the match is the first choice
to be made, hence subsequent choices must respect it even if this leads them
to less-preferred alternatives.)

.SH FILES
.TP 2i
/usr/lib/dsgrep/default_meetings
Default meetings file
.SH SEE ALSO
.PP
egrep(1), discuss(1)
